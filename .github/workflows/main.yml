name: Nx CI Pipeline

on:
  push:
    branches: [main, dev, test]
  pull_request:
    branches: [main, dev, test]

env:
  NODE_VERSION: '22.16.0'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected_apps: ${{ steps.set.outputs.affected_apps }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Get affected apps
        id: set
        run: |
          affected=$(pnpm exec nx show projects --affected --type=app --select=name)
          json_array=$(echo "$affected" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "affected_apps=$json_array" >> "$GITHUB_OUTPUT"

  build:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.outputs.affected_apps != ''
    strategy:
      matrix:
        app: ${{ fromJson(needs.setup.outputs.affected_apps) }}
    env:                                 # <-- ENV VARS HERE so they are available during build!
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build affected app
        run: pnpm --filter ${{ matrix.app }}... run build